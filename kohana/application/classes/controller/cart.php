<?phpclass Controller_Cart extends Controller_System{	public function before()	{		parent::before();		if ($this->auth->logged_in())		{			$this->user = $this->auth->get_user();		}		else		{			if ($this->request->action() == "add" OR $this->request->action() == "update" OR $this->request->action() == "delete" OR $this->request->action() == 'index')			{			}			else			{				$this->request->redirect('https://' . $this->cfg['www_domain'] . '/account/auth');			}		}	}		public function object_to_array($object)    {        if (! is_object($object) AND ! is_array($object))        {            return $object;        }        if (is_object($object))        {            $object = get_object_vars($object);        }        return array_map('self::object_to_array', $object);    }		public function action_checkout()	{		$user_id = $this->auth->get_user()->id;		$seller_id = (int) Arr::get($_GET, 'id');		$payment_method_name = Arr::get($_GET, 'pm');				//no need to validate user_shipping_method_data_id here as we will do the valitation later once we know the shipping address		$user_shipping_method_data_id = (int) Arr::get($_GET, 'ss');		$cookie_cart = Cookie::get("cart", 0);		$cookie_cart = self::object_to_array(json_decode($cookie_cart));		if (count($cookie_cart) > 0 AND $user_id != $seller_id)		{			if ($cookie_cart[$seller_id])			{				$payment_method_obj = DB::query(Database::SELECT, "SELECT option->:payment_method_name AS payment_method FROM user_payment_option WHERE user_id = :seller_id AND (option->:payment_method_name->>'active')::integer = '1'")				->param(':payment_method_name', $payment_method_name)				->param(':seller_id', $seller_id)				->execute();				if (count($payment_method_obj) > 0)				{					$array_cart = array();										//if user changed the payment method via radio button eg: from AMD to BTC, the cookie array doesn't cointain the value BTC in $array_cart[$seller_id]['t'] because it's handled via javascript, here we will make sure the cookie has the correct value					$cookie_preference = Cookie::get("preference", 0);					if ($cookie_preference !== 0)					{						$cookie_preference = json_decode($cookie_preference);						$currency_code = $cookie_preference->currency_code;						$convert_currency = $cookie_preference->convert_currency;						$cryptocurrency = $cookie_preference->cryptocurrency;					}					else					{						$currency_code = 'usd';						$convert_currency = 0;					}					$cryptocurrency = 0;					if (array_key_exists($payment_method_name, $this->cfg_crypto))					{						$cookie_cart[$seller_id]['t'] = $cryptocurrency = $payment_method_name;					}									$array_cart['cart'] = $cookie_cart;					$array_cart['active']['payment_method_name'] = $payment_method_name;					$array_cart['active']['shipping_method_id'] = $user_shipping_method_data_id;					$array_cart['active']['seller_id'] = $seller_id;					$array_cart['active']['currency_orig'] = $cookie_cart[$seller_id]['f'];					$array_cart['active']['has_shipping'] = $has_shipping = $cookie_cart[$seller_id]['s'];					$json_cart = json_encode($array_cart);					cookie::set("cart", json_encode($cookie_cart), 1209600);					$result = DB::query(Database::UPDATE, "UPDATE cart SET data = json_add_update(data, :json_cart) WHERE user_id = :user_id")					->param(':json_cart', $json_cart)					->param(':user_id', $user_id)					->execute();						if ($has_shipping == 0)					{						Request::current()->redirect("/cart/review");					}					else					{						Request::current()->redirect("/cart/shipping");					}								}				else				{					//invalid payment method					Request::current()->redirect("/cart");				}			}			else			{				Request::current()->redirect("/cart/shipping");			}		}		else		{			Request::current()->redirect("/cart");		}	}		public function action_shipping()	{				$view = View::factory(TEMPLATE . '/cart/shipping');		$user_id = $this->auth->get_user()->id;		$shipping_address_id = Arr::get($_GET, 'id');		if ($_POST)		{			$post = Validation::factory($_POST);			$country_id = (int) $post['country1'];						$post->rule('street1', 'not_empty');			$post->rule('country1', 'not_empty');			$post->rule('firstname', 'not_empty');			$post->rule('lastname', 'not_empty');					if ($country_id > 0)			{				$country_geo_info_obj = DB::query(Database::SELECT, "SELECT gi.id AS geo_info_id, cgi.compulsory_field, cgi.has_geo, gi.name, gi.short_name FROM country_geo_info cgi LEFT JOIN geo_info gi ON cgi.geo_info_id = gi.id WHERE country_id = :country_id")				->param(':country_id', $country_id)				->execute();				$post->rule('street1', 'not_empty');				foreach ($country_geo_info_obj as $record)				{					$compulsory_field = $record['compulsory_field'];					if ($compulsory_field == 1)					{						$post->rule($record['short_name'] . '', 'not_empty');					}				}			}						if ($post->check()) 			{				$array_address = array();				$id = Text::random('numeric');				foreach ($country_geo_info_obj as $record)				{					$has_geo = $record['has_geo'];					$field = $record['short_name'];					if ($has_geo == 'geo1')					{						$geo1 = (int) $post[$field . ''];						$array_address[$id][$field] = (int) $post[$field . ''];						$geo_obj = DB::query(Database::SELECT, "SELECT name AS geo1_name FROM geo1 WHERE id = :geo1")						->param(':geo1', $geo1)						->execute();						if (count($geo_obj) > 0)						{							$$field = $geo_obj[0]['geo1_name'];						}					}					else if ($has_geo == 'geo2')					{						$geo2 = (int) $post[$field . ''];						$array_address[$id][$field] = (int) $post[$field . ''];						$geo_obj = DB::query(Database::SELECT, "SELECT name AS geo2_name FROM geo2 WHERE id = :geo2")						->param(':geo2', $geo2)						->execute();						if (count($geo_obj) > 0)						{							$$field = $geo_obj[0]['geo2_name'];						}					}					else					{						$array_address[$id][$field] = $post[$field . ''];						$$field = $post[$field . ''];					}					$view->${$field . ''} = $post[$field . ''];				}								$region_obj = DB::query(Database::SELECT, "SELECT gi.short_name FROM tax_region tr LEFT JOIN geo_info gi ON tr.geo_info_id = gi.id WHERE tr.country_id = :country_id")				->param(':country_id', $country_id)				->execute();				if (count($region_obj) > 0)				{					//check whether the geo1 id exists in tax_region table (short_name can be province/state etc) is taxable....					//needed to perform tax calculation: json/get_estimate/$user_shipping_method_data_id/$seller_id/$country_id/$region_id					$array_address[$id]['region_id'] = (int) $post[$region_obj[0]['short_name']];				}								$first_name = $array_address[$id]['first_name'] = $post['firstname'];				$last_name = $array_address[$id]['last_name'] = $post['lastname'];				$street1 = $array_address[$id]['street1'] = $post['street1'];				$street2 = $array_address[$id]['street2'] = $post['street2'];								//needed to perform tax calculation: json/get_estimate/$user_shipping_method_data_id/$seller_id/$country_id/$region_id				$array_address[$id]['country_id'] = $country_id;				if ($street2 != '')				{					$street2 = $street2 . "<br>";				}				//to be used in /json/get_store_address directly so that we don't need to query db				include  __DIR__ . "/../../" . TEMPLATE . "/country_geo_array.php"; 				$address = $array_country_shipping_address[$country_id];				$array_address[$id]['address'] = "<address><b>$first_name $last_name</b><br>$address</address>";									$json_address = json_encode($array_address);				DB::query(Database::UPDATE, "UPDATE public.user SET shipping_address = json_add_update(shipping_address, :json_address) WHERE id = :user_id")				->param(':json_address', $json_address)				->param(':user_id', $user_id)				->execute();				Request::current()->redirect("/cart/shipping?s=a");			}			else			{				//the array in validate message file is not really used, we just need it as a place holder so that kohana can switch to the default error message, eg: This is a required field.				$view->errors = $post->errors('validate');				$view->alert_type = 'warning';				$view->msg = I18n::get('please_correct_errors');				$array_h_data = array();				foreach ($country_geo_info_obj as $record)				{					$has_geo = $record['has_geo'];					$field = $record['short_name'] . '';					$required = $record['compulsory_field'] == 1 ? ' *' : '';					$view->set($field, $post[$field]);					$error = isset($view->errors) ? $view->errors[$field] : '';					if ($record['short_name'] == 'country' OR $record['short_name'] == 'street1' OR $record['short_name'] == 'street2' OR $record['short_name'] == 'main_phone' OR $record['short_name'] == 'store_name')					{						$view->set($field, $post[$field]);					}					else					{						$array_h_data[$field] = $post[$field];					}				}				//storing db store info that will be loaded into form using ajax				$view->array_h_data = $array_h_data;				$view->first_name = $post['first_name'];				$view->last_name = $post['last_name'];				$view->street1 = $post['street1'];				$view->street2 = $post['street2'];				$view->country = $country_id;			}		}		else if ($shipping_address_id > 0)		{			// do address validation at later stage to save server resources			$array_cart = array();			$array_cart['active']['shipping_address_id'] = $shipping_address_id;			$json_cart = json_encode($array_cart);			DB::query(Database::UPDATE, "UPDATE cart SET data = json_add_update(data, :json_cart) where user_id = :user_id")			->param(':json_cart', $json_cart)			->param(':user_id', $user_id)			->execute();			Request::current()->redirect("/cart/review");		}				$success = Arr::get($_GET, 's', '');		if ($success != '')		{			if ($success == 'a')			{				$view->msg = I18n::get('record_added');			}		}		$shipping_address_obj = DB::query(Database::SELECT, "SELECT shipping_address FROM public.user WHERE id = :user_id")		->param(':user_id', $user_id)		->execute();				$view->array_shipping_address = $array_shipping_address = self::object_to_array(json_decode($shipping_address_obj[0]['shipping_address']));		if ($success == 'e')		{			$cart_obj = DB::query(Database::SELECT, "SELECT data->'active'->'shipping_address_id' AS shipping_address_id FROM cart WHERE user_id = :user_id")			->param(':user_id', $user_id)			->execute();					//shipping address id contains double quotes, need to remove them: "77404802"			$shipping_address_id = str_replace('"', '', $cart_obj[0]['shipping_address_id']);			$shipping_address = $array_shipping_address[$shipping_address_id];			$address = HTML::chars($shipping_address['address']);			$address_old = array('&lt;address&gt;', '&lt;/address&gt;', '&lt;b&gt;', '&lt;/b&gt;', '&lt;br&gt;');			$address_new = array('<address>', '</address>', '<b>', '</b>', '<br>');			$address = str_replace($address_old, $address_new, $address);			$view->msg_top = I18n::get('seller_doesnt_ship_to_this_country') . "<br><br><b>$address</b>";		}						$country_obj = DB::query(Database::SELECT, "SELECT id, name FROM country WHERE status = '1' ORDER BY name")->execute();		$view->country_obj = $country_obj;		$view->cfg = $this->cfg;		$this->template->content = $view;	}		public function action_review()	{		$user_id = $this->auth->get_user()->id;		$cookie_preference = Cookie::get("preference", 0);		if ($cookie_preference !== 0)		{			$cookie_preference = json_decode($cookie_preference);			$currency_code = $cookie_preference->currency_code;			$convert_currency = $cookie_preference->convert_currency;			$cryptocurrency = $cookie_preference->cryptocurrency;		}		else		{			$currency_code = 'usd';			$convert_currency = 0;		}				$array_cart = self::object_to_array(json_decode(Cookie::get("cart")));		$cart_obj = DB::query(Database::SELECT, "SELECT data->'active' AS active FROM cart WHERE user_id = :user_id")		->param(':user_id', $user_id)		->execute();			$active = self::object_to_array(json_decode($cart_obj[0]['active']));		if (count($active) == 0)		{			Request::current()->redirect("/cart");		}				$payment_method_name = $active['payment_method_name'];		$user_shipping_method_data_id = $active['shipping_method_id'];		$seller_id = $active['seller_id'];		$shipping_address_id = $active['shipping_address_id'];		$currency_orig = $active['currency_orig'];		$has_shipping = $active['has_shipping'];							$array_payment_method_name = array();		$array_payment_method_name['cash_on_delivery'] = I18n::get('cash_on_delivery');		$array_payment_method_name['bank_deposit'] = I18n::get('bank_deposit');		$array_payment_method_name['money_order'] = I18n::get('money_order');		$array_payment_method_name['cashier_check'] = I18n::get('cashier_check');		$array_payment_method_name['personal_check'] = I18n::get('personal_check');		foreach ($this->cfg_crypto as $symbol => $record)		{			$array_payment_method_name[$symbol] = ucfirst($record['name']);		}		//validate payment method, seller cannot purchase own goods		if (count($payment_method_obj) == 0 OR $seller_id == $user_id)		{			Request::current()->redirect("/cart?s=e");		}		else		{				$payment_method = $db_payment_method = $array_payment_method_name[$payment_method_name];		}				$cryptocurrency = 0;		if (array_key_exists($payment_method_name, $this->cfg_crypto))		{			$cryptocurrency = $payment_method_name;		}				//check for valid shipping address, virtual goods/service doesn't need one		if ($has_shipping == 1)		{									$shipping_address_obj = DB::query(Database::SELECT, "SELECT shipping_address->:shipping_address_id AS shipping_address FROM public.user WHERE id = :user_id")			->param(':shipping_address_id', $shipping_address_id)			->param(':user_id', $user_id)			->execute();			$array_shipping_address = self::object_to_array(json_decode($shipping_address_obj[0]['shipping_address']));						if (count($array_shipping_address) == 0)			{				Request::current()->redirect("/cart");			}									$country_id = $array_shipping_address['country_id'];			$region_id = $array_shipping_address['region_id'];						$array_shipping_tax = self::object_to_array(json_decode(Request::factory("json/get_estimate/$user_shipping_method_data_id/$payment_method_name/$seller_id/$country_id/$region_id")->execute()));			if ($array_shipping_tax['invalid'])			{				Request::current()->redirect("/cart/shipping?s=e");			}		}		//$result = DB::query(Database::SELECT, "SELECT data FROM cart WHERE user_id = :user_id")		//->param(':user_id', $user_id)		//->execute();		//$array_data = self::object_to_array(json_decode($result[0]['data']));				//randomly generated confirmation id, we do not want people to access /cart/review and /cart/order directly. Such access will be considered invalid without confirmation_id attached.		$array_cart = array();		$array_cart['active']['confirmation_id'] = $confirmation_id = Text::random('alnum', 10);		$json_cart = json_encode($array_cart);		DB::query(Database::UPDATE, "UPDATE cart SET data = json_add_update(data, :json_cart) where user_id = :user_id")		->param(':json_cart', $json_cart)		->param(':user_id', $user_id)		->execute();				$view = View::factory(TEMPLATE . '/cart/review');		if ($has_shipping == 1)		{												$shipping_address_formatted = $array_shipping_address['address'];						$address = HTML::chars($shipping_address_formatted);			$address_old = array('&lt;address&gt;', '&lt;/address&gt;', '&lt;b&gt;', '&lt;/b&gt;', '&lt;br&gt;');			$address_new = array('<address>', '</address>', '<b>', '</b>', '<br>');			$address = str_replace($address_old, $address_new, $address);			$view->shipping_address = $address;			$view->shipping_service = "{$array_shipping_tax[$user_shipping_method_data_id]['name']} ({$array_shipping_tax[$user_shipping_method_data_id]['from']} - {$array_shipping_tax[$user_shipping_method_data_id]['to']} {$array_shipping_tax[$user_shipping_method_data_id]['dayweek']})";		}		else		{			$view->shipping_address = '';			$view->shipping_service = '';		}				$pg_ld_id = '';		$params_pg_ld_id = array();		$array_listing = array();		$array_cart = self::object_to_array(json_decode(Cookie::get("cart")));		if (count($array_cart) > 0)		{			/* exclude the following info			f = from currency, original currency			t = to currency, target currency			w = total weight			c = total items to be purchase from a seller			s = has_shipping? eg: 1 virtual good + 1 physical item s = 1, 1 virtual good + 1 service s = 0			*/			unset($array_cart[$seller_id]['f']);			unset($array_cart[$seller_id]['t']);			unset($array_cart[$seller_id]['tg']);			unset($array_cart[$seller_id]['tw']);			unset($array_cart[$seller_id]['c']);			unset($array_cart[$seller_id]['s']);									foreach ($array_cart[$seller_id] as $ld_id => $record)			{				$pg_ld_id .= ":$ld_id,";				$array_listing[$ld_id] = array('quantity' => $record['q']);				$params_pg_ld_id[":$ld_id"] = $ld_id;			}		}				if ($pg_ld_id != '')		{			$pg_ld_id = substr($pg_ld_id, 0, -1);			$listing_obj = DB::query(Database::SELECT, "SELECT l.img_count, l.uid, l.object_type_id, l.title, l.id AS listing_id, ld.id AS ld_id, ld.listing->'price' AS price, ld.listing->'currency_code' AS currency_code, ld.listing->'price_usd' AS price_usd, ld.listing->'idd' AS idd FROM listing_data ld LEFT JOIN listing l ON ld.listing_id = l.id WHERE ld.id IN ($pg_ld_id) AND ld.status = '1'")			->parameters($params_pg_ld_id)			->execute();		}				$cryptocurrency = 0;		if (array_key_exists($payment_method_name, $this->cfg_crypto))		{			$cryptocurrency = $payment_method_name;		}						if (count($listing_obj) > 0)		{			$ori_grand_subtotal = 0;			$new_grand_subtotal = 0;			$ori_shipping = 0;			$new_shipping = 0;			$ori_tax = 0;			$new_tax = 0;			$ori_total = 0;			$new_total = 0;			foreach ($listing_obj as $record)			{				$ld_id = $record['ld_id'];				//instant digital delivery				$array_listing[$ld_id]['idd'] = $record['idd'];				$array_listing[$ld_id]['title'] = $record['title'];				$array_listing[$ld_id]['price_usd'] = $record['price_usd'];				$array_listing[$ld_id]['img_count'] = $record['img_count'];				$array_listing[$ld_id]['uid'] = $record['uid'];				$array_listing[$ld_id]['object_type_id'] = $record['object_type_id'];				if ($cryptocurrency === 0)				{					if ($convert_currency == 1)					{						$ori_currency_code = $currency_code;						$new_currency_code = $record['currency_code'];						$array_listing[$ld_id]['ori_price'] = sprintf("%0.2f", $record['price_usd'] * $this->cfg_currency['usd_' . $currency_code]);						$array_listing[$ld_id]['new_price'] = $record['price'];						$array_listing[$ld_id]['ori_subtotal'] = $ori_subtotal = sprintf("%0.2f", $array_listing[$ld_id]['quantity'] * $record['price_usd'] * $this->cfg_currency['usd_' . $currency_code]);						$ori_grand_subtotal += sprintf("%0.2f", $ori_subtotal);					}					else					{						$new_currency_code = $record['currency_code'];						$array_listing[$ld_id]['new_price'] = $record['price'];						$array_listing[$ld_id]['new_subtotal'] = $new_subtotal = sprintf("%0.2f", $array_listing[$ld_id]['quantity'] * $record['price']);					}					$array_listing[$ld_id]['new_subtotal'] = $new_subtotal = sprintf("%0.2f", $array_listing[$ld_id]['quantity'] * $record['price']);					$new_grand_subtotal += sprintf("%0.2f", $new_subtotal);				}				else				{					if ($convert_currency == 1)					{						$ori_currency_code = $currency_code;						$new_currency_code = $cryptocurrency;						$array_listing[$ld_id]['ori_price'] = $price = sprintf("%0.2f", $record['price_usd'] * $this->cfg_currency['usd_' . $currency_code]);						$array_listing[$ld_id]['new_price'] = $price = sprintf("%0.5f", $this->cfg_currency['usd_' . $cryptocurrency] * $record['price_usd']);						$array_listing[$ld_id]['ori_subtotal'] = $ori_subtotal = sprintf("%0.2f", $array_listing[$ld_id]['quantity'] * $record['price_usd'] * $this->cfg_currency['usd_' . $currency_code]);						$array_listing[$ld_id]['new_subtotal'] = $new_subtotal = sprintf("%0.5f", $array_listing[$ld_id]['quantity'] * $this->cfg_currency['usd_' . $cryptocurrency] * $record['price_usd']);						$ori_grand_subtotal += sprintf("%0.2f", $ori_subtotal);						$new_grand_subtotal += sprintf("%0.5f", $new_subtotal);					}					else					{						$ori_currency_code = $record['currency_code'];						$new_currency_code = $cryptocurrency;						if ($record['currency_code'] == $cryptocurrency)						{							$array_listing[$ld_id]['ori_price'] = $price = sprintf("%0.5f", $record['price']);							$array_listing[$ld_id]['new_price'] = $price = sprintf("%0.5f", $record['price']);							$array_listing[$ld_id]['ori_subtotal'] = $ori_subtotal = sprintf("%0.5f", $array_listing[$ld_id]['quantity'] * $record['price']);							$array_listing[$ld_id]['new_subtotal'] = $new_subtotal = sprintf("%0.5f", $array_listing[$ld_id]['quantity'] * $record['price']);							$ori_grand_subtotal += sprintf("%0.5f", $ori_subtotal);							$new_grand_subtotal += sprintf("%0.5f", $new_subtotal);						}						else						{							$array_listing[$ld_id]['ori_price'] = $price = sprintf("%0.2f", $record['price']);							$array_listing[$ld_id]['new_price'] = $price = sprintf("%0.5f", $this->cfg_currency['usd_' . $cryptocurrency] * $record['price_usd']);							$array_listing[$ld_id]['ori_subtotal'] = $ori_subtotal = sprintf("%0.2f", $array_listing[$ld_id]['quantity'] * $record['price']);							$array_listing[$ld_id]['new_subtotal'] = $new_subtotal = sprintf("%0.5f", $array_listing[$ld_id]['quantity'] * $this->cfg_currency['usd_' . $cryptocurrency] * $record['price_usd']);							$ori_grand_subtotal += sprintf("%0.2f", $ori_subtotal);							$new_grand_subtotal += sprintf("%0.5f", $new_subtotal);						}																																}				}			}									if ($cryptocurrency === 0)			{				if ($convert_currency == 1)				{					$ori_grand_subtotal = sprintf("%0.2f", $ori_grand_subtotal);					$new_grand_subtotal = sprintf("%0.2f", $new_grand_subtotal);					$ori_shipping = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['shipping_orig']);					$new_shipping = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['shipping_converted']);					$ori_tax = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['tax_orig']);					$new_tax = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['tax_converted']);					$ori_total = sprintf("%0.2f", $ori_grand_subtotal + $ori_shipping + $ori_tax);					$new_total = sprintf("%0.2f", $new_grand_subtotal + $new_shipping + $new_tax);					$show_display = 1;				}				else				{					$new_grand_subtotal = sprintf("%0.2f", $new_grand_subtotal);					$new_shipping = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['shipping_converted']);					$new_tax = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['tax_converted']);					$new_total = sprintf("%0.2f", $new_grand_subtotal + $new_shipping + $new_tax);					$show_display = 0;				}			}			else			{				if ($ori_currency_code == $new_currency_code)				{					$show_display = 0;				}				else				{					$show_display = 1;				}				$ori_grand_subtotal = sprintf("%0.2f", $ori_grand_subtotal);				$new_grand_subtotal = sprintf("%0.5f", $new_grand_subtotal);				$ori_shipping = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['shipping_orig']);				$new_shipping = sprintf("%0.5f", $array_shipping_tax[$user_shipping_method_data_id]['shipping_converted']);				$ori_tax = sprintf("%0.2f", $array_shipping_tax[$user_shipping_method_data_id]['tax_orig']);				$new_tax = sprintf("%0.5f", $array_shipping_tax[$user_shipping_method_data_id]['tax_converted']);				$ori_total = sprintf("%0.2f", $ori_grand_subtotal + $ori_shipping + $ori_tax);				$new_total = sprintf("%0.5f", $new_grand_subtotal + $new_shipping + $new_tax);							}		}		$view->show_display = $show_display;		$view->ori_currency = $ori_currency_code;		$view->new_currency = $new_currency_code;		$view->ori_grand_subtotal = $ori_grand_subtotal;		$view->new_grand_subtotal = $new_grand_subtotal;		$view->ori_shipping = $ori_shipping;		$view->new_shipping = $new_shipping;		$view->ori_tax = $ori_tax;		$view->new_tax = $new_tax;		$view->ori_total = $ori_total;		$view->new_total = $new_total;		$view->has_shipping = $has_shipping;		$view->array_shipping_tax = $array_shipping_tax;		$view->payment_method_name = $payment_method_name;		$view->user_shipping_method_data_id = $user_shipping_method_data_id;		//$view->currency_orig = $currency_orig;		$view->array_listing = $array_listing;		$view->cfg = $this->cfg;		$view->cfg_currency = $this->cfg_currency;				$view->confirmation_id = $confirmation_id;		$view->seller_id = $seller_id;				$view->payment_method = $payment_method;					//store order into cart table		$array_cart = array();		$array_cart['active']['has_shipping'] = $has_shipping;		$array_cart['active']['item'] = $array_listing;		$array_cart['active']['show_display'] = $show_display;		if ($show_display == 1)		{			$array_cart['active']['ori_currency_code'] = $ori_currency_code;			$array_cart['active']['ori_grand_subtotal'] = $ori_grand_subtotal;			$array_cart['active']['ori_shipping'] = $ori_shipping;			$array_cart['active']['ori_tax'] = $ori_tax;			$array_cart['active']['ori_total'] = $ori_total;		}		$array_cart['active']['new_currency_code'] = $new_currency_code;		$array_cart['active']['new_grand_subtotal'] = $new_grand_subtotal;		$array_cart['active']['new_shipping'] = $new_shipping;		$array_cart['active']['new_tax'] = $new_tax;		$array_cart['active']['new_total'] = $new_total;		$array_cart['active']['shipping_service'] = $view->shipping_service;		$array_cart['active']['payment_method'] = $db_payment_method;		$array_cart['active']['shipping_address'] = $shipping_address_formatted;				$this->template->content = $view;					//escape special characters like Lay's chip		//$json_data = Database::instance()->escape(json_encode($array_cart));		$json_data = json_encode($array_cart);		$result = DB::query(Database::UPDATE, "UPDATE cart SET data = json_add_update(data, :json_data) WHERE user_id = :user_id")		->param(':json_data', $json_data)		->param(':user_id', $user_id)		->execute();	}		public function action_order()	{		$user_id = $this->auth->get_user()->id;		$username = $this->auth->get_user()->username;		$confirmation_id = Arr::get($_POST, 'id');		//json_decode is needed for data wrapped with double quotes, for example string, floating point. Integer is stored without floating point		$cart_obj = DB::query(Database::SELECT, "SELECT data->'active' AS active FROM cart WHERE user_id = :user_id")		->param(':user_id', $user_id)		->execute();		$active = self::object_to_array(json_decode($cart_obj[0]['active']));		if (count($active) == 0)		{			Request::current()->redirect("/cart");		}			$payment_method_name = $active['payment_method_name'];						if ( ! isset($active['confirmation_id']))		{			Request::current()->redirect("/cart");		}		if ($confirmation_id != $active['confirmation_id'])		{			Request::current()->redirect("/cart");		}		if ( ! $_POST)		{			Request::current()->redirect("/cart");		}			$listing_data_ids = '';		$array_quantity_listing = array();		$array_db_quantity_listing = array();		foreach ($active['item'] as $listing_data_id => $value)		{			$listing_data_ids .= "$listing_data_id,";			$array_quantity_listing[$listing_data_id] = $value['quantity'];		}		$listing_data_ids = substr($listing_data_ids, 0, -1);				$listing_obj = DB::query(Database::SELECT, "SELECT ld.id, ld.listing->'user_id' AS seller_id, ld.listing->'quantity' AS quantity FROM listing_data ld LEFT JOIN listing l ON ld.listing_id = l.id WHERE ld.id IN ($listing_data_ids)")		->execute();		if ( ! $listing_obj)		{			throw new Kohana_Exception('site_error ');		}		$array_no_stock = array();		foreach ($listing_obj as $record)		{			$id = $record['id'];			$db_quantity = $record['quantity'];			$seller_id = $record['seller_id'];			$title = $record['title'];			$array_db_quantity_listing[$id] = $db_quantity - $array_quantity_listing[$id];			if ($db_quantity < $array_quantity_listing[$id])			{				$array_no_stock[$id]['quantity'] = $db_quantity;				$array_no_stock[$id]['seller_id'] = $seller_id;			}		}		if (count($array_no_stock) > 0)		{			$this->session->set('ls', $array_no_stock);			Request::current()->redirect("/cart?m=ls");		}				$transaction_ok = 0;		$view = View::factory(TEMPLATE . '/cart/order');		$view->crypto_address = '';		$seller_id = $active['seller_id'];								$transaction_ok = 1;		$payment_method_obj = DB::query(Database::SELECT, "SELECT u.username, upo.option->:payment_method_name->:payment_method_name_note AS payment_note FROM user_payment_option upo LEFT JOIN public.user u ON upo.user_id = u.id WHERE upo.user_id = :seller_id")		->param(':payment_method_name', $payment_method_name)		->param(':payment_method_name_note', $payment_method_name . '_note')		->param(':seller_id', $seller_id)		->execute();		$payment_note = json_decode($payment_method_obj[0]['payment_note']);		$seller_username = $payment_method_obj[0]['username'];		if (array_key_exists($payment_method_name, $this->cfg_crypto))		{			include Kohana::find_file('libraries', 'Crypto');			include Kohana::find_file('libraries', 'jsonRPCClient');			$array_crypto_cfg = $this->cfg_crypto[$payment_method_name];			$crypto = new Crypto($array_crypto_cfg);			$record = $crypto->get_new_address($seller_username);			if ($record['status'] == 0)			{				$error = $record['error'];				throw new Kohana_Exception($error);			}			else			{				$crypto_address = $record['address'];				$view->crypto_address = $crypto_address;				$total = $active['new_total'] . ' ' . strtoupper($active['new_currency_code']);				$view->crypto_message = sprintf(I18n::get('please_send_amount_to'), $total, $payment_method_name);				$view->order = $active;			}						// we do not want to include transaction of type 'receive' that is not confirmed yet (status = '00') but we want to make sure that all 'send' transactions are counted			$balance_obj = DB::query(Database::SELECT, "SELECT crypto, sum(amount) + sum(fee) AS balance FROM crypto_transaction WHERE account = :username AND (status = '01' OR category = 'send') AND crypto = :crypto GROUP BY crypto")			->param(':username', $username)			->param(':crypto', $payment_method_name)			->execute();					$view->enough_balance = 0;			if (count($balance_obj) > 0)			{				foreach ($balance_obj as $record)				{					$crypto = $record['crypto'];					$balance = $record['balance'];					$total_decimal = $active['new_total'] * 1e8;					if ($balance > $total_decimal)					{						$view->enough_balance = 1;					}				}			}			/*			}			catch(Exception $e)			{				print $e->getMessage();			}			*/			}				if ($transaction_ok == 1)		{			DB::query('NULL', 'BEGIN')->execute();			$order_data = $active;			$order_data['order_status'] = 2;						if (array_key_exists($payment_method_name, $this->cfg_crypto))			{				$order_data['crypto_address'] = $crypto_address;			}						$json_data = json_encode($order_data);			$order_obj = DB::query(Database::INSERT, "INSERT INTO public.order(buyer_id, seller_id, data) VALUES(:user_id, :seller_id, :json_data)")			->param(':user_id', $user_id)			->param(':seller_id', $seller_id)			->param(':json_data', $json_data)			->execute();			if ( ! $order_obj)			{				DB::query('NULL', 'ROLLBACK')->execute();				throw new Kohana_Exception('site_error ');			}									//update records to reflect stock available			if (count($array_db_quantity_listing) > 0)			{				foreach ($array_db_quantity_listing as $listing_data_id => $quantity)				{					$result = DB::query(Database::SELECT, "SELECT node_path FROM listing_data ld LEFT JOIN listing l ON ld.listing_id = l.id LEFT JOIN categories_entity ce ON l.cid = ce.id WHERE ld.id = :listing_id")					->param(':listing_id', $listing_data_id)					->execute();					if ( ! $result)					{						throw new Kohana_Exception('site_error ');					}					$node_path = $result[0]['node_path'];					$array_node_path = explode(".", $node_path);					if ($array_node_path[1] != 10)					{						$listing_data_obj = DB::query(Database::UPDATE, "UPDATE listing_data SET listing = listing || hstore('quantity', '$quantity') WHERE id = :listing_data_id")						->param(':listing_data_id', $listing_data_id)						->execute();						if ( ! $listing_data_obj)						{							DB::query('NULL', 'ROLLBACK')->execute();							throw new Kohana_Exception('site_error ');						}					}				}			}												$order_id_obj = DB::query(Database::SELECT, "SELECT currval('order_id_seq') AS order_id")->execute();			$order_id = $order_id_obj[0]['order_id'];			if ( ! order_id_obj)			{				DB::query('NULL', 'ROLLBACK')->execute();				throw new Kohana_Exception('site_error ');			}															$order_obj = DB::query(Database::SELECT, "SELECT o.id, o.data, u.email, date_part('epoch', submitted)::int AS submitted FROM public.order o LEFT JOIN public.user u ON (data->'seller_id')::text::int = u.id WHERE o.id = :order_id")			->param(':order_id', $order_id)			->execute();			if ( ! $order_obj)			{				DB::query('NULL', 'ROLLBACK')->execute();				throw new Kohana_Exception('site_error ');			}			if (count($order_obj) == 1)			{				$order_id = $order_obj[0]['id'];				$email = $order_obj[0]['email'];				$array_data = self::object_to_array(json_decode($order_obj[0]['data']));				$order_message = "\r\n\r\n" . I18n::get('order_summary') . "\r\n====================\r\n";				$product = '';				foreach ($array_data['item'] as $index => $record)				{					$title = HTML::chars($record['title']);					$quantity = $record['quantity'];					$order_message .= HTML::chars($record['title']) . ' x ' . $record['quantity'] . "\r\n";				}				$currency = strtoupper($array_data['new_currency_code']);				$order_message .= "====================\r\n\r\n";				$order_message .= I18n::get('subtotal') . ': ' . $array_data['new_grand_subtotal'] . " $currency\r\n";				$order_message .= I18n::get('shipping') . ': ' . $array_data['new_shipping'] . " $currency\r\n";				$order_message .= I18n::get('tax') . ': ' . $array_data['new_tax'] . " $currency\r\n";				$order_message .= I18n::get('total') . ': ' . $array_data['new_total'] . " $currency\r\n";				$order_message .= I18n::get('payment_method') . ': ' . $array_data['payment_method'] . "\r\n";				$order_message .= I18n::get('shipping_service') . ': ' . $array_data['shipping_service'] . "\r\n";				$order_message .= I18n::get('order_date') . ': ' .  date('M d, Y', $order_obj[0]['submitted']) . "\r\n";												$buyer_url = "https://" . $this->cfg['www_domain'] . "/my/purchase/detail?id=$order_id";				$seller_url = "https://" . $this->cfg['www_domain'] . "/my/order/detail?id=$order_id";				//for seller				$email_subject = sprintf(I18n::get('email.subject.order_received'), $order_id);				$email_message = sprintf(I18n::get('email.message.order_received'), $order_id, $order_message, $seller_url);				$transport = Swift_MailTransport::newInstance();				$mailer = Swift_Mailer::newInstance($transport);				$message = Swift_Message::newInstance($email_subject)				->setFrom(array($this->cfg["from_email"] => $this->cfg["site_name"] . ' Support'))				->setTo($email)				->setBody($email_message, 'text/plain');				$mailer->send($message);																//for buyer				$email = $this->auth->get_user()->email;				$email_subject = sprintf(I18n::get('email.subject.order_placed'), $order_id);				$email_message = sprintf(I18n::get('email.message.order_placed'), $order_id, $order_message, $buyer_url);				$transport = Swift_MailTransport::newInstance();				$mailer = Swift_Mailer::newInstance($transport);				$message = Swift_Message::newInstance($email_subject)				->setFrom(array($this->cfg["from_email"] => $this->cfg["site_name"] . ' Support'))				->setTo($email)				->setBody($email_message, 'text/plain');				$mailer->send($message);							}																$result = DB::query(Database::INSERT, "INSERT INTO user_rating(order_id, buyer_feedback, seller_feedback, buyer_id, seller_id) VALUES(:order_id, '{\"status\":0}', '{\"status\":0}', :user_id, :seller_id)")			->param(':order_id', $order_id)			->param(':user_id', $user_id)			->param(':seller_id', $seller_id)			->execute();			if ( ! $result)			{				DB::query('NULL', 'ROLLBACK')->execute();				throw new Kohana_Exception('site_error ');			}						$array_cart = self::object_to_array(json_decode(Cookie::get("cart", 0)));			unset($array_cart[$seller_id]);			cookie::set("cart", json_encode($array_cart), 1209600);						$total_cart_item = 0;			foreach ($array_cart as $seller_id => $subarray)			{				unset($subarray['f']);				unset($subarray['t']);				unset($subarray['tg']);				unset($subarray['tw']);				unset($subarray['c']);				unset($subarray['s']);				foreach ($subarray as $id => $value)				{					$total_cart_item += $array_cart[$seller_id][$id]['q'];				}				}			cookie::set("total_cart_item", $total_cart_item, 1209600);						$array_cart = array();			//zero array_cart will produce an empty cart":"", which will be evaluated as count($array_cart) >0 and cause error in foreach in action_index			if (count($cookie_cart) > 0)			{				$array_cart['cart'] = $cookie_cart;			}			if (count($array_cart) == 0)			{				$json_cart = "{}";			}			else			{				$json_cart = json_encode($array_cart);			}						$result = DB::query(Database::UPDATE, "UPDATE cart SET data = :json_cart WHERE user_id = :user_id")			->param(':json_cart', $json_cart)			->param(':user_id', $user_id)			->execute();			if ( ! $result)			{				DB::query('NULL', 'ROLLBACK')->execute();				throw new Kohana_Exception('site_error ');			}						DB::query('NULL', 'COMMIT')->execute();												$view->order_id = $order_id;			$view->title = I18n::get('order_completed');			$view->msg = I18n::get('thank_you_order');			if (isset($payment_note))			{				$view->msg .= "<br><br>" . HTML::chars($payment_note);			}						$view->cfg = $this->cfg;			$this->template->content = $view;		}		else		{			$view = View::factory(TEMPLATE . '/cart/transaction_error');			$view->msg = I18n::get('transaction_cannot_be_processed');			$this->template->content = $view;		}	}			public function action_add()	{		if ($_POST)		{			$listing_id = (int)Arr::get($_POST, 'id');			$user_id = $this->auth->get_user()->id;				$seller_id = (int)Arr::get($_POST, 'uid');						if ($user_id == $seller_id)			{				Request::current()->redirect('/cart?m=self');			}						$array_cart = self::object_to_array(json_decode(Cookie::get("cart")));			/*			print"<pre>";			print_r($array_cart);			print"</pre>";			print"<br>size: " . count($array_cart);			*/									$listing_obj = DB::query(Database::SELECT, "SELECT ld.id, ld.listing->'quantity' AS quantity, ld.listing->'shippable' AS shippable, ld.listing->'selling_option' AS selling_option FROM listing_data ld WHERE ld.listing_id = :listing_id AND (ld.listing->'user_id')::integer = :seller_id AND ld.status = '1'")			->param(':listing_id', $listing_id)			->param(':seller_id', $seller_id)			->execute();							if (count($listing_obj) > 0)			{				$ld_id = $listing_obj[0]['id'];				$quantity = $listing_obj[0]['quantity'];				$selling_option = $listing_obj[0]['selling_option'];				$shippable = $listing_obj[0]['shippable'];				if (($selling_option & 1) > 0)				{					if ($quantity === "" OR $quantity > 0)					{											if (isset($array_cart[$seller_id][$ld_id]))						{							//keep the cart info for two weeks							//php cookie doesn't support subarray, subarray elements are converted to stdclass object, so we use the following way to update its element							$array_cart[$seller_id][$ld_id]['q'] += 1;						}						else						{							if (count($array_cart) == 0)							{								$array_cart[$seller_id] = array();								$array_cart[$seller_id][$ld_id] = array();								$array_cart[$seller_id][$ld_id]['q'] = 1;								//is the item shippable? (excluded from shipping/tax?)								$array_cart[$seller_id][$ld_id]['s'] = $shippable;							}							else							{								if (isset($array_cart[$seller_id]))								{									$array_cart[$seller_id][$ld_id] = array();									$array_cart[$seller_id][$ld_id]['q'] = 1;									$array_cart[$seller_id][$ld_id]['s'] = $shippable;								}								else								{									$array_cart[$seller_id] = array();									$array_cart[$seller_id][$ld_id] = array();									$array_cart[$seller_id][$ld_id]['q'] = 1;									$array_cart[$seller_id][$ld_id]['s'] = $shippable;								}							}							//'c' value is use by action_delete + action_update to remove array_cart element if there's no item in it							$array_cart[$seller_id]['c'] += 1;						}						cookie::set("cart", json_encode($array_cart), 1209600);												$total_cart_item = 0;						foreach ($array_cart as $seller_id => $subarray)						{							unset($subarray['f']);							unset($subarray['t']);							unset($subarray['tg']);							unset($subarray['tw']);							unset($subarray['c']);							unset($subarray['s']);							foreach ($subarray as $id => $value)							{								$total_cart_item += $array_cart[$seller_id][$id]['q'];							}							}						cookie::set("total_cart_item", $total_cart_item, 1209600);						//$this->session->set('total_cart_item', $total_cart_item);					}						else					{						Request::current()->redirect('/cart?m=oos');					}				}				else				{					//this item doesn't support cart, possible hack attempt					Request::current()->redirect('/cart');				}			}			Request::current()->redirect('/cart');		}	}		public function action_update()	{		$user_id = $this->auth->get_user()->id;		if ($_GET)		{			$array_cart = self::object_to_array(json_decode(Cookie::get("cart")));			$ld_id = (int) Arr::get($_GET, 'id');			$quantity = (int) Arr::get($_GET, 'val');			if (count($array_cart) > 0)			{				foreach ($array_cart as $seller_id => $data)				{					if ($quantity == 0)					{						unset($array_cart[$seller_id][$ld_id]);						$array_cart[$seller_id]['c'] -= 1;					}					else					{						if ($array_cart[$seller_id][$ld_id])						{							$listing_obj = DB::query(Database::SELECT, "SELECT ld.listing->'quantity' AS quantity FROM listing_data ld WHERE ld.id = :ld_id AND (ld.listing->'user_id')::integer = :seller_id AND ld.status = '1'")							->param(':ld_id', $ld_id)							->param(':seller_id', $seller_id)							->execute();							if (count($listing_obj) > 0)							{								$item_quantity = $listing_obj[0]['quantity'];								if ($item_quantity >= $quantity OR $item_quantity === '')								{									$array_cart[$seller_id][$ld_id]['q'] = $quantity;								}								else								{									$array_no_stock = array();									$array_no_stock[$ld_id]['quantity'] = $item_quantity;									$array_no_stock[$ld_id]['seller_id'] = $seller_id;									$this->session->set('ls', $array_no_stock);									Request::current()->redirect("/cart?m=ls");								}							}						}					}					if ($array_cart[$seller_id]['c'] == 0)					{						unset($array_cart[$seller_id]);					}				}			}			cookie::set("cart", json_encode($array_cart), 1209600);			$total_cart_item = 0;			foreach ($array_cart as $seller_id => $subarray)			{				unset($subarray['f']);				unset($subarray['t']);				unset($subarray['tg']);				unset($subarray['tw']);				unset($subarray['c']);				unset($subarray['s']);				foreach ($subarray as $id => $value)				{					$total_cart_item += $array_cart[$seller_id][$id]['q'];				}				}				cookie::set("total_cart_item", $total_cart_item, 1209600);			//$this->session->set('total_cart_item', $total_cart_item);			Request::current()->redirect("/cart?s=u");		}	}		public function action_delete()	{		$user_id = $this->auth->get_user()->id;			if ($_GET)		{			$ld_id = (int) Arr::get($_GET, 'id');			$cookie_cart = Cookie::get("cart", 0);			$array_cart = self::object_to_array(json_decode($cookie_cart));			if (count($array_cart) > 0)			{				foreach ($array_cart as $seller_id => $data)				{					if ($array_cart[$seller_id][$ld_id])					{						unset($array_cart[$seller_id][$ld_id]);						$array_cart[$seller_id]['c'] -= 1;						if ($array_cart[$seller_id]['c'] == 0)						{							unset($array_cart[$seller_id]);							break;						}											}				}			}			cookie::set("cart", json_encode($array_cart), 1209600);						$total_cart_item = 0;			foreach ($array_cart as $seller_id => $subarray)			{				unset($subarray['f']);				unset($subarray['t']);				unset($subarray['tg']);				unset($subarray['tw']);				unset($subarray['c']);				unset($subarray['s']);				foreach ($subarray as $id => $value)				{					$total_cart_item += $array_cart[$seller_id][$id]['q'];				}				}			cookie::set("total_cart_item", $total_cart_item, 1209600);			//$this->session->set('total_cart_item', $total_cart_item);			Request::current()->redirect("/cart?s=u");		}	}				function action_index()	{		$view = View::factory(TEMPLATE . '/cart');		$array_listing = array();		//needed to store total item weight in gram per seller		$array_cart = self::object_to_array(json_decode(Cookie::get("cart")));		if ($_POST)		{					}		$success = Arr::get($_GET, 's', '');		$msg = Arr::get($_GET, 'm');						if ($success != '')		{			if($success == 'u')			{				$view->msg = I18n::get('cart_updated');			}		}				$pg_ld_id = '';		$pg_seller_id = '';		$pg_query = '';		$params_ld_id = array();		$params_seller_id = array();		if (count($array_cart) > 0)		{			foreach ($array_cart as $seller_id => $value)			{				$array_cart[$seller_id]['tw'] = '';				$array_listing[$seller_id] = array();				foreach ($value as $ld_id => $result)				{					/* exclude the following info					f = from currency, original currency					t = to currency, target currency					tg = taxable grand subtotal, used by /json/get_estimate, grand subtotal only includes physical products					tw = taxable total weights					tc = taxable total items (count) to be purchase from a seller					s = does the items sold by the seller contain shipipable goods? eg: 1 virtual good + 1 physical item s = 1, 1 virtual good + 1 service s = 0, need that we also store shippable status for each item (virtual or physical) from each seller					*/					$array_exclude = array(						'f',						't',						'tg',						'tw',						'c',						's',											);										if ( ! in_array($ld_id, $array_exclude))					{												$array_listing[$seller_id][$ld_id] = array('quantity' => $result['q']);						$pg_ld_id .= ":$ld_id,";						$params_ld_id[":$ld_id"] = $ld_id;					}				}				$pg_seller_id .= ":$seller_id,";				$params_seller_id[":$seller_id"] = $seller_id;			}		}						if ($pg_ld_id != '')		{			$pg_ld_id = substr($pg_ld_id, 0, -1);			$listing_obj = DB::query(Database::SELECT, "SELECT l.title, l.id AS listing_id, l.object_type_id, ld.id AS ld_id, l.img_count, l.uid, ld.listing->'price' AS price, ld.listing->'currency_code' AS currency_code, ld.listing->'price_usd' AS price_usd, ld.listing->'user_id' AS seller_id, ld.listing->'item_weight' AS item_weight, ld.listing->'weight_unit' AS weight_unit, ce.has_shipping FROM listing_data ld LEFT JOIN listing l ON ld.listing_id = l.id LEFT JOIN categories_entity ce ON l.cid = ce.id WHERE ld.id IN ($pg_ld_id) AND ld.status = '1'")			->parameters($params_ld_id)			->execute();		}						if ($pg_seller_id != '')		{			$pg_seller_id = substr($pg_seller_id, 0, -1);			$payment_method_obj = DB::query(Database::SELECT, "SELECT upo.user_id, upo.option, u.shipping_country FROM user_payment_option upo LEFT JOIN public.user u ON upo.user_id = u.id WHERE upo.user_id IN ($pg_seller_id)")			->parameters($params_seller_id)			->execute();							$array_payment_method = array();			$array_payment_method_name = array();			$array_payment_method_name['cash_on_delivery'] = I18n::get('cash_on_delivery');			$array_payment_method_name['bank_deposit'] = I18n::get('bank_deposit');			$array_payment_method_name['money_order'] = I18n::get('money_order');			$array_payment_method_name['cashier_check'] = I18n::get('cashier_check');			$array_payment_method_name['personal_check'] = I18n::get('personal_check');			foreach ($this->cfg_crypto as $symbol => $record)			{				$array_payment_method_name[$symbol] = ucfirst($record['name']);			}				$array_country = array();			foreach ($payment_method_obj as $record)			{				$array_payment_db = self::object_to_array(json_decode($record['option']));				$seller_id = $record['user_id'];				$array_country[$seller_id] = $record['shipping_country'];				if (count($array_payment_db) > 0)				{										foreach ($array_payment_db as $payment_name => $value)					{						if ($array_payment_db[$payment_name]['active'] == 1)						{							$array_payment_method[$seller_id][$payment_name] = $array_payment_method_name[$payment_name];						}					}				}							}		}		$seller_id = 0;				//needed to store total item weight in gram per seller		if (count($listing_obj) > 0)		{			foreach ($listing_obj as $record)			{				$seller_id = $record['seller_id'];				$ld_id = $record['ld_id'];								$array_listing[$seller_id][$ld_id]['title'] = $record['title'];				$array_listing[$seller_id][$ld_id]['listing_id'] = $record['listing_id'];				$array_listing[$seller_id][$ld_id]['img_count'] = $record['img_count'];				$array_listing[$seller_id][$ld_id]['uid'] = $record['uid'];				$array_listing[$seller_id][$ld_id]['price'] = $record['price'];				$array_listing[$seller_id][$ld_id]['price_usd'] = $record['price_usd'];				$array_listing[$seller_id][$ld_id]['currency_code'] = $record['currency_code'];				$array_listing[$seller_id][$ld_id]['object_type_id'] = $record['object_type_id'];				$array_listing[$seller_id][$ld_id]['has_shipping'] = $record['has_shipping'];								if ( ! $array_listing[$seller_id]['has_shipping'])				{					$array_listing[$seller_id]['has_shipping'] = 0;				}				if ($record['has_shipping'] == 1)				{					$array_listing[$seller_id]['has_shipping'] = 1;				}				//print"<pre>";				//print_r($array_listing);				//print"</pre>";					$array_weight_unit = array();				$weight_unit = $record['weight_unit'];				//convert weight unit(kg, lbs and oz) to g				$array_weight_unit[2] = 1000;				$array_weight_unit[3] = 453.592;				$array_weight_unit[4] = 28.3495;							if ($weight_unit == 1)				{					$item_weight = $record['item_weight'] * $array_cart[$seller_id][$ld_id]['q'];				}				else				{					$item_weight = (($record['item_weight'] / 1) * $array_weight_unit[$weight_unit]) * $array_cart[$seller_id][$ld_id]['q'];				}				if ($record['has_shipping'] == 1)				{					//taxable weight					$array_cart[$seller_id]['tw'] += $item_weight;				}			}		}				if ($msg != '')		{			if ($msg == 'self')			{				$view->msg = I18n::get('no_purchase_from_own_listing');			}			else if ($msg == 'oos')			{				$view->msg = I18n::get('out_of_stock.msg');			}			else if ($msg == 'ls')			{				$ls = $this->session->get('ls');				$listing_info = '';				if (count($ls) > 0)				{					foreach ($ls as $listing_data_id => $record)					{						$listing_info .= $array_listing[$record['seller_id']][$listing_data_id]['title'] . ' &nbsp;&nbsp;' . I18n::get('quantity_available') . ': ' . $record['quantity'] . '<br>';					}				}				$view->msg = I18n::get('limited_stock') . "<br><br>$listing_info";			}		}																$cookie_preference = Cookie::get("preference", 0);		//cookie is not set, get it from maxmind api		if ($cookie_preference === 0)		{		}		else		{			$cookie_preference = json_decode($cookie_preference);		}		$view->country = $cookie_preference->country_id;		$view->country_obj = DB::query(Database::SELECT, "SELECT id, name, iso3166 FROM country WHERE user_selectable = '1' ORDER BY name")->execute();				$tax_region_obj = DB::query(Database::SELECT, "SELECT tr.country_id, gi.name, tr.data FROM tax_region tr LEFT JOIN geo_info gi ON tr.geo_info_id = gi.id")->execute();		$array_tax_region = array();		foreach ($tax_region_obj as $result)		{			$array_tax_region[$result['country_id']]['name'] = $result['name'];			$array_tax_region[$result['country_id']]['data'] = self::object_to_array(json_decode($result['data']));		}		$view->array_country = $array_country;		$view->array_tax_region = $array_tax_region;		$view->array_cart = $array_cart;		$view->array_listing = $array_listing;		$view->array_payment_method = $array_payment_method;		$view->cfg = $this->cfg;		$view->cfg_currency = $this->cfg_currency;		$view->cfg_crypto = $this->cfg_crypto;		$this->template->content = $view;	}}?>