<?phpclass Controller_Listingcontact extends Controller_System{	public function before()	{		parent::before();	}		function action_index()	{		$view = View::factory(TEMPLATE . '/listingcontact');		if ($_POST)		{			$this->auth = Auth::instance();			$this->auth->auto_login();			$logged_in = $this->auth->logged_in();						$error = 0;			$user_id = (int)$this->auth->get_user()->id;						$post = Validation::factory($_POST)				->rule('message', 'not_empty');			if ($user_id == 0)			{				$post->rule('name', 'not_empty')					->rule('email', 'not_empty')					->rule('email', 'email')					->rule('message', 'not_empty');			}			if ($post->check()) 			{				$listing_id = (int)$post['id'];				$uid = (int)$post['uid'];				$result = DB::query(Database::SELECT, "SELECT l.uid, u.email AS to_email, l.title FROM listing_data ld LEFT JOIN listing l ON ld.listing_id = l.id LEFT JOIN public.user u ON (ld.listing->'user_id')::integer = u.id WHERE ld.listing_id = :listing_id AND (ld.listing->'user_id')::integer = :uid")				->param(':listing_id', $listing_id)				->param(':uid', $uid)				->execute(); 								if (count($result) > 0)				{					$to_email = $result[0]['to_email'];					$title = $result[0]['title'];					$uid = $result[0]['uid'];										if ($user_id == 0)					{						$from_email = $post['email'];						$from_name = $post['name'];					}					else					{						$from_email = $this->auth->get_user()->email;						$from_name = $this->auth->get_user()->email;					}						try					{						list($msec, $timestamp) = explode(" ", microtime());						$msec = substr($msec, 2) . "0";						$message_id = "$timestamp.$msec";						$transport = Swift_MailTransport::newInstance();						$mailer = Swift_Mailer::newInstance($transport);						$message = Swift_Message::newInstance($title)						->setFrom(array($from_email => $from_name))						->setTo($to_email)						->setReplyTo($from_email)						//->setId($message_id)						->setBody($post['message'] . i18n::get("disclaimer_msg"));												//don't send first						//$mailer->send($message);						$result = i18n::get("email_sent");					}					catch (Swift_ConnectionException $e)					{						$error = 1;					}					catch (Swift_Message_MimeException $e)					{						$error = 1;					}					catch (Swift_RfcComplianceException $e)					{						//Kohana::$log->add(Kohana::ERROR, $e->getMessage() . " " . $e->getFile());						//Kohana::$log->write();						$error = 1;					}														if ($error == 0)					{						$view->info = I18n::get('email_sent');						$listing_type = $object_type_id == 1 ? 'us' : 'st';						$view = View::factory(TEMPLATE . '/special_info');						$view->header = I18n::get('contact_listing_poster');						$view->url = "/$listing_type/$uid";						$view->msg = I18n::get('email_sent');					}					else					{						Request::current()->redirect("/listingcontact?id=$listing_id&t=$object_type_id&error=1");					}				}				else				{					throw new Kohana_Exception('site_error');				}			}		}		$listing_id = (int)Arr::get($_GET, 'id');		$uid = (int)Arr::get($_GET, 'uid');		$listing_obj = DB::query(Database::SELECT, "SELECT l.id, l.title FROM listing l WHERE l.id = :listing_id")		->param(':listing_id', $listing_id)		->execute();			$view->title = $listing_obj[0]['title'];		$view->cfg = $this->cfg;		$view->id = $listing_id;		$view->uid = $uid;		$view->error = Arr::get($_GET, 'error');		$this->template->content = $view;	}}?>