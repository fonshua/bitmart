<?phpclass Controller_Preference extends Controller_System{	public function before()	{		parent::before();	}		public function object_to_array($object)    {        if (! is_object($object) AND ! is_array($object))        {            return $object;        }        if (is_object($object))        {            $object = get_object_vars($object);        }        return array_map('self::object_to_array', $object);    }		function action_index()	{		$view = View::factory(TEMPLATE . '/preference');		$country_id = 0;		if ($_POST)		{			$post = Validation::factory($_POST);			$convert_currency = (int)Arr::get($_POST, 'convert_currency');			$country_id = (int)Arr::get($_POST, 'country');			$geo1_id = (int)Arr::get($_POST, 'geo1');			$geo2_id = (int)Arr::get($_POST, 'geo2');			$currency = (int)Arr::get($_POST, 'currency');			$cc = Arr::get($_POST, 'cc');			$zip = sprintf("%05d", (int)Arr::get($_POST, 'zip'));			if ($zip == '00000')			{				$zip = '';			}			if ($convert_currency == 1)			{				$post->rule('currency', 'not_empty');			}						if ($post->check())			{				$cryptocurrency = 0;				if (count($cc) == 1)				{					if (array_key_exists($cc[0], $this->cfg_crypto))					{						$cryptocurrency = $cc[0];					}				}								$cookie_preference = Cookie::get("preference", 0);				if ($cookie_preference !== 0)				{					$cookie_preference = self::object_to_array(json_decode($cookie_preference));				}				else				{					$cookie_preference = array();				}								$country_obj = DB::query(Database::SELECT, "SELECT id, name, iso3166 FROM country WHERE user_selectable = '1' AND id = :country_id ORDER BY name")				->param(':country_id', $country_id)				->execute();				if (count($country_obj) > 0)				{					$cookie_preference['country_id'] = $country_obj[0]['id'];					$cookie_preference['country_name'] = $country_obj[0]['name'];					$cookie_preference['country_code'] = $country_obj[0]['iso3166'];					$cookie_preference['geo1_id'] = $geo1_id;					$cookie_preference['geo2_id'] = $geo2_id;					$cookie_preference['zip'] = $zip;				}				$cookie_preference['convert_currency'] = $convert_currency;				$cookie_preference['cryptocurrency'] = $cryptocurrency;				if ($convert_currency == 1)				{					$currency_obj = DB::query(Database::SELECT, "SELECT id, iso4217 FROM currency WHERE id = :currency")					->param(':currency', $currency)					->execute();					if (count($currency_obj) > 0)					{						$cookie_preference['currency_id'] = $currency_obj[0]['id'];						$cookie_preference['currency_code'] = $currency_obj[0]['iso4217'];					}				}				cookie::set("preference", json_encode($cookie_preference), Date::YEAR);				$this->request->redirect('/preference');			}			else			{				$view->errors = $post->errors('validate');			}		}		else		{			$item_location = Arr::get($_GET, 'item_location');			$ship_to = Arr::get($_GET, 'ship_to');				if (isset($item_location))			{				$cookie_preference = Cookie::get("preference", 0);				if ($cookie_preference !== 0)				{					$cookie_preference = self::object_to_array(json_decode($cookie_preference));				}				else				{					$cookie_preference = array();				}				//append the settings, do not overwrite the entire cookie				$cookie_preference['item_location'] = $item_location;				cookie::set("preference", json_encode($cookie_preference), Date::YEAR);				$this->request->redirect('http://' . $this->cfg['www_domain'] . $this->session->get('requested_url'));			}									if (isset($ship_to))			{				$cookie_preference = Cookie::get("preference", 0);				if ($cookie_preference !== 0)				{					$cookie_preference = self::object_to_array(json_decode($cookie_preference));				}				else				{					$cookie_preference = array();				}				$cookie_preference['ship_to'] = $ship_to;				cookie::set("preference", json_encode($cookie_preference), Date::YEAR);				$this->request->redirect('http://' . $this->cfg['www_domain'] . $this->session->get('requested_url'));			}						$currency = Arr::get($_GET, 'currency', 0);			if ($currency !== 0)			{				$cookie_preference = Cookie::get("preference", 0);				if ($cookie_preference !== 0)				{					$cookie_preference = self::object_to_array(json_decode($cookie_preference));				}				else				{					$cookie_preference = array();				}								if (array_key_exists($currency, $this->cfg_crypto))				{					$cookie_preference['cryptocurrency'] = $currency;				}				else if ($currency == 'all')				{					$cookie_preference['cryptocurrency'] = 0;					$cookie_preference['convert_currency'] = 0;					$cookie_preference['currency_code'] = '';				}									cookie::set("preference", json_encode($cookie_preference), Date::YEAR);				$this->request->redirect('http://' . $this->cfg['www_domain'] . $this->session->get('requested_url'));			}						$cookie_preference = Cookie::get("preference", 0);			//cookie is not set, get it from maxmind api			if ($cookie_preference === 0)			{			}			else			{				$cookie_preference = json_decode($cookie_preference);			}		}		$view->session = $this->session;		$view->cfg = $this->cfg;		$view->cfg_crypto = $this->cfg_crypto;		foreach ($this->cfg_crypto as $symbol => $record)		{			$active = $record['active'];			$name = $record['name'];			if ($record['active'] == 1)			{				$view->{$name} = $cookie_preference->cryptocurrency === $symbol ? 1 : 0;			}				}		$view->convert_currency = Arr::get($_POST, 'convert_currency', $cookie_preference->convert_currency);		$view->country_id = Arr::get($_POST, 'country', $cookie_preference->country_id);		$view->h_geo1 = Arr::get($_POST, 'geo1', $cookie_preference->geo1_id);		$view->h_geo2 = Arr::get($_POST, 'geo2', $cookie_preference->geo2_id);		$zip = sprintf("%05d", (int)Arr::get($_POST, 'zip', $cookie_preference->zip));		$view->zip = $zip == '00000' ? '' : $zip;		$view->currency = Arr::get($_POST, 'currency', $cookie_preference->currency_id);		$country_obj = DB::query(Database::SELECT, "SELECT id, name, iso3166 FROM country WHERE user_selectable = '1' ORDER BY name")->execute();		$currency_obj = DB::query(Database::SELECT, "SELECT * FROM currency ORDER BY iso4217")->execute();		$view->country_obj = $country_obj;		$view->currency_obj = $currency_obj;		$this->template->content = $view;	}}?>